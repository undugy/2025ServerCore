// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SharedStruct.proto

#include "SharedStruct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR SPosition::SPosition(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct SPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SPositionDefaultTypeInternal() {}
  union {
    SPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SPositionDefaultTypeInternal _SPosition_default_instance_;
PROTOBUF_CONSTEXPR BigTest::BigTest(
    ::_pbi::ConstantInitialized)
  : a_(int64_t{0})
  , b_(int64_t{0})
  , c_(int64_t{0}){}
struct BigTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigTestDefaultTypeInternal() {}
  union {
    BigTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigTestDefaultTypeInternal _BigTest_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_SharedStruct_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SharedStruct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SharedStruct_2eproto = nullptr;

const uint32_t TableStruct_SharedStruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::SPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::SPosition, x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::SPosition, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::BigTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::BigTest, a_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BigTest, b_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BigTest, c_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::SPosition)},
  { 8, -1, -1, sizeof(::Protocol::BigTest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_SPosition_default_instance_._instance,
  &::Protocol::_BigTest_default_instance_._instance,
};

const char descriptor_table_protodef_SharedStruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022SharedStruct.proto\022\010Protocol\032\020SharedEn"
  "um.proto\"!\n\tSPosition\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 "
  "\001(\002\"*\n\007BigTest\022\t\n\001A\030\001 \001(\003\022\t\n\001B\030\002 \001(\003\022\t\n\001"
  "C\030\003 \001(\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_SharedStruct_2eproto_deps[1] = {
  &::descriptor_table_SharedEnum_2eproto,
};
static ::_pbi::once_flag descriptor_table_SharedStruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SharedStruct_2eproto = {
    false, false, 135, descriptor_table_protodef_SharedStruct_2eproto,
    "SharedStruct.proto",
    &descriptor_table_SharedStruct_2eproto_once, descriptor_table_SharedStruct_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_SharedStruct_2eproto::offsets,
    file_level_metadata_SharedStruct_2eproto, file_level_enum_descriptors_SharedStruct_2eproto,
    file_level_service_descriptors_SharedStruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SharedStruct_2eproto_getter() {
  return &descriptor_table_SharedStruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SharedStruct_2eproto(&descriptor_table_SharedStruct_2eproto);
namespace Protocol {

// ===================================================================

class SPosition::_Internal {
 public:
};

SPosition::SPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.SPosition)
}
SPosition::SPosition(const SPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.SPosition)
}

inline void SPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

SPosition::~SPosition() {
  // @@protoc_insertion_point(destructor:Protocol.SPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.SPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.SPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.SPosition)
  return target;
}

size_t SPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.SPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPosition::GetClassData() const { return &_class_data_; }

void SPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPosition *>(to)->MergeFrom(
      static_cast<const SPosition &>(from));
}


void SPosition::MergeFrom(const SPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.SPosition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPosition::CopyFrom(const SPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.SPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPosition::IsInitialized() const {
  return true;
}

void SPosition::InternalSwap(SPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPosition, y_)
      + sizeof(SPosition::y_)
      - PROTOBUF_FIELD_OFFSET(SPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SharedStruct_2eproto_getter, &descriptor_table_SharedStruct_2eproto_once,
      file_level_metadata_SharedStruct_2eproto[0]);
}

// ===================================================================

class BigTest::_Internal {
 public:
};

BigTest::BigTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.BigTest)
}
BigTest::BigTest(const BigTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:Protocol.BigTest)
}

inline void BigTest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

BigTest::~BigTest() {
  // @@protoc_insertion_point(destructor:Protocol.BigTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BigTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BigTest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.BigTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 A = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 B = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 C = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BigTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BigTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 A = 1;
  if (this->_internal_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_a(), target);
  }

  // int64 B = 2;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_b(), target);
  }

  // int64 C = 3;
  if (this->_internal_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BigTest)
  return target;
}

size_t BigTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.BigTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 A = 1;
  if (this->_internal_a() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_a());
  }

  // int64 B = 2;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_b());
  }

  // int64 C = 3;
  if (this->_internal_c() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_c());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BigTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigTest::GetClassData() const { return &_class_data_; }

void BigTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BigTest *>(to)->MergeFrom(
      static_cast<const BigTest &>(from));
}


void BigTest::MergeFrom(const BigTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BigTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from._internal_b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from._internal_c() != 0) {
    _internal_set_c(from._internal_c());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigTest::CopyFrom(const BigTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BigTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigTest::IsInitialized() const {
  return true;
}

void BigTest::InternalSwap(BigTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BigTest, c_)
      + sizeof(BigTest::c_)
      - PROTOBUF_FIELD_OFFSET(BigTest, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BigTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SharedStruct_2eproto_getter, &descriptor_table_SharedStruct_2eproto_once,
      file_level_metadata_SharedStruct_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::SPosition*
Arena::CreateMaybeMessage< ::Protocol::SPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::SPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::BigTest*
Arena::CreateMaybeMessage< ::Protocol::BigTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::BigTest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
