// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SharedEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SharedEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SharedEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SharedEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SharedEnum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SharedEnum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum EPacketProtocol : int {
  PACKET_PROTOCOL_START = 0,
  CS_ChatRequest = 1,
  SC_ChatResponse = 2,
  CS_CircularSectorSkillRequest = 3,
  SC_CircularSectorSkillResponse = 4,
  CS_BigTestRequest = 5,
  SC_BigTestResponse = 6,
  EPacketProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPacketProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPacketProtocol_IsValid(int value);
constexpr EPacketProtocol EPacketProtocol_MIN = PACKET_PROTOCOL_START;
constexpr EPacketProtocol EPacketProtocol_MAX = SC_BigTestResponse;
constexpr int EPacketProtocol_ARRAYSIZE = EPacketProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPacketProtocol_descriptor();
template<typename T>
inline const std::string& EPacketProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPacketProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPacketProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPacketProtocol_descriptor(), enum_t_value);
}
inline bool EPacketProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPacketProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPacketProtocol>(
    EPacketProtocol_descriptor(), name, value);
}
enum EDBProtocol : int {
  DB_PROTOCOL_START = 0,
  SGDB_ServerStart = 1,
  SGDB_ChatRequest = 2,
  GDBS_ChatResponse = 3,
  EDBProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EDBProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EDBProtocol_IsValid(int value);
constexpr EDBProtocol EDBProtocol_MIN = DB_PROTOCOL_START;
constexpr EDBProtocol EDBProtocol_MAX = GDBS_ChatResponse;
constexpr int EDBProtocol_ARRAYSIZE = EDBProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDBProtocol_descriptor();
template<typename T>
inline const std::string& EDBProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDBProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDBProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDBProtocol_descriptor(), enum_t_value);
}
inline bool EDBProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDBProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDBProtocol>(
    EDBProtocol_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::EPacketProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EPacketProtocol>() {
  return ::Protocol::EPacketProtocol_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EDBProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EDBProtocol>() {
  return ::Protocol::EDBProtocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SharedEnum_2eproto
